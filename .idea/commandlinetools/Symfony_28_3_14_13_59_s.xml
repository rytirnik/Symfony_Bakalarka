<?xml version="1.0" encoding="UTF-8"?>
<framework xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="schemas/frameworkDescriptionVersion1.1.3.xsd" frameworkId="com.symfony" name="Symfony_28.3.14 13:59_s" invoke="&quot;$PhpExecutable$&quot; C:\wamp\www\Symfony_Bakalarka\app\console" alias="s" enabled="true" version="2">
  <command>
    <name>help</name>
    <help><![CDATA[The <b>help</b> command displays help for a given command:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console help list</b><br> <br> You can also output the help as XML by using the <comment>--xml</comment> option:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console help --xml list</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--xml</td><td></td><td>To output help as XML</td></tr> </table> <br/>]]></help>
    <params>command_name[=null]</params>
    <optionsBefore>
      <option name="--xml" shortcut="">
        <help><![CDATA[To output help as XML]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>list</name>
    <help><![CDATA[The <b>list</b> command lists all commands:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console list</b><br> <br> You can also display the commands for a specific namespace:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console list test</b><br> <br> You can also output the information as XML by using the <comment>--xml</comment> option:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console list --xml</b><br> <br> It's also possible to get raw list of commands (useful for embedding command runner):<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console list --raw</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--xml</td><td></td><td>To output help as XML</td></tr> <tr><td>--raw</td><td></td><td>To output raw command list</td></tr> </table> <br/>]]></help>
    <params>namespace[=null]</params>
    <optionsBefore>
      <option name="--xml" shortcut="">
        <help><![CDATA[To output help as XML]]></help>
      </option>
      <option name="--raw" shortcut="">
        <help><![CDATA[To output raw command list]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>assetic:dump</name>
    <help><![CDATA[Dumps all assets to the filesystem<br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--watch</td><td></td><td>Check for changes every second, debug mode only</td></tr> <tr><td>--force</td><td></td><td>Force an initial generation of all assets (used with --watch)</td></tr> <tr><td>--period</td><td></td><td>Set the polling period in seconds (used with --watch)</td></tr> </table> <br/>]]></help>
    <params>write_to[=null]</params>
    <optionsBefore>
      <option name="--watch" shortcut="">
        <help><![CDATA[Check for changes every second, debug mode only]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Force an initial generation of all assets (used with --watch)]]></help>
      </option>
      <option name="--period" shortcut="" pattern="equals">
        <help><![CDATA[Set the polling period in seconds (used with --watch)]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>assets:install</name>
    <help><![CDATA[The <b>assets:install</b> command installs bundle assets into a given<br> directory (e.g. the web directory).<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console assets:install web</b><br> <br> A "bundles" directory will be created inside the target directory, and the<br> "Resources/public" directory of each bundle will be copied into it.<br> <br> To create a symlink to each bundle instead of copying its assets, use the<br> <b>--symlink</b> option:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console assets:install web --symlink</b><br> <br> To make symlink relative, add the <b>--relative</b> option:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console assets:install web --symlink --relative</b><br> <br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--symlink</td><td></td><td>Symlinks the assets instead of copying it</td></tr> <tr><td>--relative</td><td></td><td>Make relative symlinks</td></tr> </table> <br/>]]></help>
    <params>target[=null]</params>
    <optionsBefore>
      <option name="--symlink" shortcut="">
        <help><![CDATA[Symlinks the assets instead of copying it]]></help>
      </option>
      <option name="--relative" shortcut="">
        <help><![CDATA[Make relative symlinks]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>cache:clear</name>
    <help><![CDATA[The <b>cache:clear</b> command clears the application cache for a given environment<br> and debug mode:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console cache:clear --env=dev</b><br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console cache:clear --env=prod --no-debug</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--no-warmup</td><td></td><td>Do not warm up the cache</td></tr> <tr><td>--no-optional-warmers</td><td></td><td>Skip optional cache warmers (faster)</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--no-warmup" shortcut="">
        <help><![CDATA[Do not warm up the cache]]></help>
      </option>
      <option name="--no-optional-warmers" shortcut="">
        <help><![CDATA[Skip optional cache warmers (faster)]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>cache:warmup</name>
    <help><![CDATA[The <b>cache:warmup</b> command warms up the cache.<br> <br> Before running this command, the cache must be empty.<br> <br> This command does not generate the classes cache (as when executing this<br> command, too many classes that should be part of the cache are already loaded<br> in memory). Use <comment>curl</comment> or any other similar tool to warm up<br> the classes cache if you want.<br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--no-optional-warmers</td><td></td><td>Skip optional cache warmers (faster)</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--no-optional-warmers" shortcut="">
        <help><![CDATA[Skip optional cache warmers (faster)]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>config:dump-reference</name>
    <help><![CDATA[The <b>config:dump-reference</b> command dumps the default configuration for an extension/bundle.<br> <br> The extension alias or bundle name can be used:<br> <br> Example:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console config:dump-reference framework</b><br> <br> or<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console config:dump-reference FrameworkBundle</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> </table> <br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>container:debug</name>
    <help><![CDATA[The <b>container:debug</b> command displays all configured <comment>public</comment> services:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console container:debug</b><br> <br> To get specific information about a service, specify its name:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console container:debug validator</b><br> <br> By default, private services are hidden. You can display all services by<br> using the --show-private flag:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console container:debug --show-private</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--show-private</td><td></td><td>Use to show public *and* private services</td></tr> </table> <br/>]]></help>
    <params>name[=null]</params>
    <optionsBefore>
      <option name="--show-private" shortcut="">
        <help><![CDATA[Use to show public *and* private services]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:cache:clear-metadata</name>
    <help><![CDATA[The <b>doctrine:cache:clear-metadata</b> command clears all metadata<br> cache for the default entity manager:<br> <br> <b>php app/console doctrine:cache:clear-metadata</b><br> <br> You can also optionally specify the <comment>--em</comment> option to specify<br> which entity manager to clear the cache for:<br> <br> <b>php app/console doctrine:cache:clear-metadata --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--flush</td><td></td><td>If defined, cache entries will be flushed instead of deleted/invalidated.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--flush" shortcut="">
        <help><![CDATA[If defined, cache entries will be flushed instead of deleted/invalidated.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:cache:clear-query</name>
    <help><![CDATA[The <b>doctrine:cache:clear-query</b> command clears all query cache for<br> the default entity manager:<br> <br> <b>php app/console doctrine:cache:clear-query</b><br> <br> You can also optionally specify the <comment>--em</comment> option to specify<br> which entity manager to clear the cache for:<br> <br> <b>php app/console doctrine:cache:clear-query --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--flush</td><td></td><td>If defined, cache entries will be flushed instead of deleted/invalidated.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--flush" shortcut="">
        <help><![CDATA[If defined, cache entries will be flushed instead of deleted/invalidated.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:cache:clear-result</name>
    <help><![CDATA[The <b>doctrine:cache:clear-result</b> command clears all result cache<br> for the default entity manager:<br> <br> <b>php app/console doctrine:cache:clear-result</b><br> <br> You can also optionally specify the <comment>--em</comment> option to specify<br> which entity manager to clear the cache for:<br> <br> <b>php app/console doctrine:cache:clear-result --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--flush</td><td></td><td>If defined, cache entries will be flushed instead of deleted/invalidated.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--flush" shortcut="">
        <help><![CDATA[If defined, cache entries will be flushed instead of deleted/invalidated.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:database:create</name>
    <help><![CDATA[The <b>doctrine:database:create</b> command creates the default<br> connections database:<br> <br> <b>php app/console doctrine:database:create</b><br> <br> You can also optionally specify the name of a connection to create the<br> database for:<br> <br> <b>php app/console doctrine:database:create --connection=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--connection</td><td></td><td>The connection to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--connection" shortcut="" pattern="equals">
        <help><![CDATA[The connection to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:database:drop</name>
    <help><![CDATA[The <b>doctrine:database:drop</b> command drops the default connections<br> database:<br> <br> <b>php app/console doctrine:database:drop</b><br> <br> The --force parameter has to be used to actually drop the database.<br> <br> You can also optionally specify the name of a connection to drop the database<br> for:<br> <br> <b>php app/console doctrine:database:drop --connection=default</b><br> <br> <error>Be careful: All data in a given database will be lost when executing<br> this command.</error><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--connection</td><td></td><td>The connection to use for this command</td></tr> <tr><td>--force</td><td></td><td>Set this parameter to execute this action</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--connection" shortcut="" pattern="equals">
        <help><![CDATA[The connection to use for this command]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Set this parameter to execute this action]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:ensure-production-settings</name>
    <help><![CDATA[The <b>doctrine:ensure-production-settings</b> command ensures that<br> Doctrine is properly configured for a production environment.:<br> <br> <b>php app/console doctrine:ensure-production-settings</b><br> <br> You can also optionally specify the <comment>--em</comment> option to specify<br> which entity manager to use:<br> <br> <b>php app/console doctrine:ensure-production-settings --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--complete</td><td></td><td>Flag to also inspect database connection existance.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--complete" shortcut="">
        <help><![CDATA[Flag to also inspect database connection existance.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:generate:crud</name>
    <help><![CDATA[The <b>doctrine:generate:crud</b> command generates a CRUD based on a Doctrine entity.<br> <br> The default command only generates the list and show actions.<br> <br> <b>php app/console doctrine:generate:crud --entity=AcmeBlogBundle:Post --route-prefix=post_admin</b><br> <br> Using the --with-write option allows to generate the new, edit and delete actions.<br> <br> <b>php app/console doctrine:generate:crud --entity=AcmeBlogBundle:Post --route-prefix=post_admin --with-write</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--entity</td><td></td><td>The entity class name to initialize (shortcut notation)</td></tr> <tr><td>--route-prefix</td><td></td><td>The route prefix</td></tr> <tr><td>--with-write</td><td></td><td>Whether or not to generate create, new and delete actions</td></tr> <tr><td>--format</td><td></td><td>Use the format for configuration files (php, xml, yml, or annotation)</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--entity" shortcut="" pattern="equals">
        <help><![CDATA[The entity class name to initialize (shortcut notation)]]></help>
      </option>
      <option name="--route-prefix" shortcut="" pattern="equals">
        <help><![CDATA[The route prefix]]></help>
      </option>
      <option name="--with-write" shortcut="">
        <help><![CDATA[Whether or not to generate create, new and delete actions]]></help>
      </option>
      <option name="--format" shortcut="" pattern="equals">
        <help><![CDATA[Use the format for configuration files (php, xml, yml, or annotation)]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>generate:doctrine:crud</name>
    <help><![CDATA[The <b>doctrine:generate:crud</b> command generates a CRUD based on a Doctrine entity.<br> <br> The default command only generates the list and show actions.<br> <br> <b>php app/console doctrine:generate:crud --entity=AcmeBlogBundle:Post --route-prefix=post_admin</b><br> <br> Using the --with-write option allows to generate the new, edit and delete actions.<br> <br> <b>php app/console doctrine:generate:crud --entity=AcmeBlogBundle:Post --route-prefix=post_admin --with-write</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--entity</td><td></td><td>The entity class name to initialize (shortcut notation)</td></tr> <tr><td>--route-prefix</td><td></td><td>The route prefix</td></tr> <tr><td>--with-write</td><td></td><td>Whether or not to generate create, new and delete actions</td></tr> <tr><td>--format</td><td></td><td>Use the format for configuration files (php, xml, yml, or annotation)</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--entity" shortcut="" pattern="equals">
        <help><![CDATA[The entity class name to initialize (shortcut notation)]]></help>
      </option>
      <option name="--route-prefix" shortcut="" pattern="equals">
        <help><![CDATA[The route prefix]]></help>
      </option>
      <option name="--with-write" shortcut="">
        <help><![CDATA[Whether or not to generate create, new and delete actions]]></help>
      </option>
      <option name="--format" shortcut="" pattern="equals">
        <help><![CDATA[Use the format for configuration files (php, xml, yml, or annotation)]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:generate:entities</name>
    <help><![CDATA[The <b>doctrine:generate:entities</b> command generates entity classes<br> and method stubs from your mapping information:<br> <br> You have to limit generation of entities:<br> <br> * To a bundle:<br> <br> <b>php app/console doctrine:generate:entities MyCustomBundle</b><br> <br> * To a single entity:<br> <br> <b>php app/console doctrine:generate:entities MyCustomBundle:User</b><br> <b>php app/console doctrine:generate:entities MyCustomBundle/Entity/User</b><br> <br> * To a namespace<br> <br> <b>php app/console doctrine:generate:entities MyCustomBundle/Entity</b><br> <br> If the entities are not stored in a bundle, and if the classes do not exist,<br> the command has no way to guess where they should be generated. In this case,<br> you must provide the <comment>--path</comment> option:<br> <br> <b>php app/console doctrine:generate:entities Blog/Entity --path=src/</b><br> <br> By default, the unmodified version of each entity is backed up and saved<br> (e.g. Product.php~). To prevent this task from creating the backup file,<br> pass the <comment>--no-backup</comment> option:<br> <br> <b>php app/console doctrine:generate:entities Blog/Entity --no-backup</b><br> <br> <error>Important:</error> Even if you specified Inheritance options in your<br> XML or YAML Mapping files the generator cannot generate the base and<br> child classes for you correctly, because it doesn't know which<br> class is supposed to extend which. You have to adjust the entity<br> code manually for inheritance to work!<br> <br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--path</td><td></td><td>The path where to generate entities when it cannot be guessed</td></tr> <tr><td>--no-backup</td><td></td><td>Do not backup existing entities files.</td></tr> </table> <br/>]]></help>
    <params>name</params>
    <optionsBefore>
      <option name="--path" shortcut="" pattern="equals">
        <help><![CDATA[The path where to generate entities when it cannot be guessed]]></help>
      </option>
      <option name="--no-backup" shortcut="">
        <help><![CDATA[Do not backup existing entities files.]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>generate:doctrine:entities</name>
    <help><![CDATA[The <b>doctrine:generate:entities</b> command generates entity classes<br> and method stubs from your mapping information:<br> <br> You have to limit generation of entities:<br> <br> * To a bundle:<br> <br> <b>php app/console doctrine:generate:entities MyCustomBundle</b><br> <br> * To a single entity:<br> <br> <b>php app/console doctrine:generate:entities MyCustomBundle:User</b><br> <b>php app/console doctrine:generate:entities MyCustomBundle/Entity/User</b><br> <br> * To a namespace<br> <br> <b>php app/console doctrine:generate:entities MyCustomBundle/Entity</b><br> <br> If the entities are not stored in a bundle, and if the classes do not exist,<br> the command has no way to guess where they should be generated. In this case,<br> you must provide the <comment>--path</comment> option:<br> <br> <b>php app/console doctrine:generate:entities Blog/Entity --path=src/</b><br> <br> By default, the unmodified version of each entity is backed up and saved<br> (e.g. Product.php~). To prevent this task from creating the backup file,<br> pass the <comment>--no-backup</comment> option:<br> <br> <b>php app/console doctrine:generate:entities Blog/Entity --no-backup</b><br> <br> <error>Important:</error> Even if you specified Inheritance options in your<br> XML or YAML Mapping files the generator cannot generate the base and<br> child classes for you correctly, because it doesn't know which<br> class is supposed to extend which. You have to adjust the entity<br> code manually for inheritance to work!<br> <br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--path</td><td></td><td>The path where to generate entities when it cannot be guessed</td></tr> <tr><td>--no-backup</td><td></td><td>Do not backup existing entities files.</td></tr> </table> <br/>]]></help>
    <params>name</params>
    <optionsBefore>
      <option name="--path" shortcut="" pattern="equals">
        <help><![CDATA[The path where to generate entities when it cannot be guessed]]></help>
      </option>
      <option name="--no-backup" shortcut="">
        <help><![CDATA[Do not backup existing entities files.]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:generate:entity</name>
    <help><![CDATA[The <b>doctrine:generate:entity</b> task generates a new Doctrine<br> entity inside a bundle:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post</b><br> <br> The above command would initialize a new entity in the following entity<br> namespace <b>Acme\BlogBundle\Entity\Blog\Post</b>.<br> <br> You can also optionally specify the fields you want to generate in the new<br> entity:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --fields="title:string(255) body:text"</b><br> <br> The command can also generate the corresponding entity repository class with the<br> <comment>--with-repository</comment> option:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --with-repository</b><br> <br> By default, the command uses annotations for the mapping information; change it<br> with <comment>--format</comment>:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --format=yml</b><br> <br> To deactivate the interaction mode, simply use the `--no-interaction` option<br> without forgetting to pass all needed options:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --format=annotation --fields="title:string(255) body:text" --with-repository --no-interaction</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--entity</td><td></td><td>The entity class name to initialize (shortcut notation)</td></tr> <tr><td>--fields</td><td></td><td>The fields to create with the new entity</td></tr> <tr><td>--format</td><td></td><td>Use the format for configuration files (php, xml, yml, or annotation)</td></tr> <tr><td>--with-repository</td><td></td><td>Whether to generate the entity repository or not</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--entity" shortcut="" pattern="equals">
        <help><![CDATA[The entity class name to initialize (shortcut notation)]]></help>
      </option>
      <option name="--fields" shortcut="" pattern="equals">
        <help><![CDATA[The fields to create with the new entity]]></help>
      </option>
      <option name="--format" shortcut="" pattern="equals">
        <help><![CDATA[Use the format for configuration files (php, xml, yml, or annotation)]]></help>
      </option>
      <option name="--with-repository" shortcut="">
        <help><![CDATA[Whether to generate the entity repository or not]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>generate:doctrine:entity</name>
    <help><![CDATA[The <b>doctrine:generate:entity</b> task generates a new Doctrine<br> entity inside a bundle:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post</b><br> <br> The above command would initialize a new entity in the following entity<br> namespace <b>Acme\BlogBundle\Entity\Blog\Post</b>.<br> <br> You can also optionally specify the fields you want to generate in the new<br> entity:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --fields="title:string(255) body:text"</b><br> <br> The command can also generate the corresponding entity repository class with the<br> <comment>--with-repository</comment> option:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --with-repository</b><br> <br> By default, the command uses annotations for the mapping information; change it<br> with <comment>--format</comment>:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --format=yml</b><br> <br> To deactivate the interaction mode, simply use the `--no-interaction` option<br> without forgetting to pass all needed options:<br> <br> <b>php app/console doctrine:generate:entity --entity=AcmeBlogBundle:Blog/Post --format=annotation --fields="title:string(255) body:text" --with-repository --no-interaction</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--entity</td><td></td><td>The entity class name to initialize (shortcut notation)</td></tr> <tr><td>--fields</td><td></td><td>The fields to create with the new entity</td></tr> <tr><td>--format</td><td></td><td>Use the format for configuration files (php, xml, yml, or annotation)</td></tr> <tr><td>--with-repository</td><td></td><td>Whether to generate the entity repository or not</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--entity" shortcut="" pattern="equals">
        <help><![CDATA[The entity class name to initialize (shortcut notation)]]></help>
      </option>
      <option name="--fields" shortcut="" pattern="equals">
        <help><![CDATA[The fields to create with the new entity]]></help>
      </option>
      <option name="--format" shortcut="" pattern="equals">
        <help><![CDATA[Use the format for configuration files (php, xml, yml, or annotation)]]></help>
      </option>
      <option name="--with-repository" shortcut="">
        <help><![CDATA[Whether to generate the entity repository or not]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:generate:form</name>
    <help><![CDATA[The <b>doctrine:generate:form</b> command generates a form class based on a Doctrine entity.<br> <br> <b>php app/console doctrine:generate:form AcmeBlogBundle:Post</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> </table> <br/>]]></help>
    <params>entity</params>
  </command>
  <command>
    <name>generate:doctrine:form</name>
    <help><![CDATA[The <b>doctrine:generate:form</b> command generates a form class based on a Doctrine entity.<br> <br> <b>php app/console doctrine:generate:form AcmeBlogBundle:Post</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> </table> <br/>]]></help>
    <params>entity</params>
  </command>
  <command>
    <name>doctrine:mapping:convert</name>
    <help><![CDATA[The <b>doctrine:mapping:convert</b> command converts mapping information<br> between supported formats:<br> <br> <b>php app/console doctrine:mapping:convert xml /path/to/output</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--filter</td><td></td><td>A string pattern used to match entities that should be processed.</td></tr> <tr><td>--force</td><td></td><td>Force to overwrite existing mapping files.</td></tr> <tr><td>--from-database</td><td></td><td>Whether or not to convert mapping information from existing database.</td></tr> <tr><td>--extend</td><td></td><td>Defines a base class to be extended by generated entity classes.</td></tr> <tr><td>--num-spaces</td><td></td><td>Defines the number of indentation spaces</td></tr> <tr><td>--namespace</td><td></td><td>Defines a namespace for the generated entity classes, if converted from database.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <params>to-type dest-path</params>
    <optionsBefore>
      <option name="--filter" shortcut="" pattern="equals">
        <help><![CDATA[A string pattern used to match entities that should be processed.]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Force to overwrite existing mapping files.]]></help>
      </option>
      <option name="--from-database" shortcut="">
        <help><![CDATA[Whether or not to convert mapping information from existing database.]]></help>
      </option>
      <option name="--extend" shortcut="" pattern="equals">
        <help><![CDATA[Defines a base class to be extended by generated entity classes.]]></help>
      </option>
      <option name="--num-spaces" shortcut="" pattern="equals">
        <help><![CDATA[Defines the number of indentation spaces]]></help>
      </option>
      <option name="--namespace" shortcut="" pattern="equals">
        <help><![CDATA[Defines a namespace for the generated entity classes, if converted from database.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:mapping:import</name>
    <help><![CDATA[The <b>doctrine:mapping:import</b> command imports mapping information<br> from an existing database:<br> <br> <b>php app/console doctrine:mapping:import "MyCustomBundle" xml</b><br> <br> You can also optionally specify which entity manager to import from with the<br> <b>--em</b> option:<br> <br> <b>php app/console doctrine:mapping:import "MyCustomBundle" xml --em=default</b><br> <br> If you don't want to map every entity that can be found in the database, use the<br> <b>--filter</b> option. It will try to match the targeted mapped entity with the<br> provided pattern string.<br> <br> <b>php app/console doctrine:mapping:import "MyCustomBundle" xml --filter=MyMatchedEntity</b><br> <br> Use the <b>--force</b> option, if you want to override existing mapping files:<br> <br> <b>php app/console doctrine:mapping:import "MyCustomBundle" xml --force</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> <tr><td>--filter</td><td></td><td>A string pattern used to match entities that should be mapped.</td></tr> <tr><td>--force</td><td></td><td>Force to overwrite existing mapping files.</td></tr> </table> <br/>]]></help>
    <params>bundle mapping-type[=null]</params>
    <optionsBefore>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
      <option name="--filter" shortcut="" pattern="equals">
        <help><![CDATA[A string pattern used to match entities that should be mapped.]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Force to overwrite existing mapping files.]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:mapping:info</name>
    <help><![CDATA[The <b>doctrine:mapping:info</b> shows basic information about which<br> entities exist and possibly if their mapping information contains errors or<br> not.<br> <br> <b>php app/console doctrine:mapping:info</b><br> <br> If you are using multiple entity managers you can pick your choice with the<br> <b>--em</b> option:<br> <br> <b>php app/console doctrine:mapping:info --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:query:dql</name>
    <help><![CDATA[The <b>doctrine:query:dql</b> command executes the given DQL query and<br> outputs the results:<br> <br> <b>php app/console doctrine:query:dql "SELECT u FROM UserBundle:User u"</b><br> <br> You can also optional specify some additional options like what type of<br> hydration to use when executing the query:<br> <br> <b>php app/console doctrine:query:dql "SELECT u FROM UserBundle:User u" --hydrate=array</b><br> <br> Additionally you can specify the first result and maximum amount of results to<br> show:<br> <br> <b>php app/console doctrine:query:dql "SELECT u FROM UserBundle:User u" --first-result=0 --max-result=30</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--hydrate</td><td></td><td>Hydration mode of result set. Should be either: object, array, scalar or single-scalar.</td></tr> <tr><td>--first-result</td><td></td><td>The first result in the result set.</td></tr> <tr><td>--max-result</td><td></td><td>The maximum number of results in the result set.</td></tr> <tr><td>--depth</td><td></td><td>Dumping depth of Entity graph.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <params>dql</params>
    <optionsBefore>
      <option name="--hydrate" shortcut="" pattern="equals">
        <help><![CDATA[Hydration mode of result set. Should be either: object, array, scalar or single-scalar.]]></help>
      </option>
      <option name="--first-result" shortcut="" pattern="equals">
        <help><![CDATA[The first result in the result set.]]></help>
      </option>
      <option name="--max-result" shortcut="" pattern="equals">
        <help><![CDATA[The maximum number of results in the result set.]]></help>
      </option>
      <option name="--depth" shortcut="" pattern="equals">
        <help><![CDATA[Dumping depth of Entity graph.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:query:sql</name>
    <help><![CDATA[The <b>doctrine:query:sql</b> command executes the given SQL query and<br> outputs the results:<br> <br> <b>php app/console doctrine:query:sql "SELECT * from user"</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--depth</td><td></td><td>Dumping depth of result set.</td></tr> <tr><td>--connection</td><td></td><td>The connection to use for this command</td></tr> </table> <br/>]]></help>
    <params>sql</params>
    <optionsBefore>
      <option name="--depth" shortcut="" pattern="equals">
        <help><![CDATA[Dumping depth of result set.]]></help>
      </option>
      <option name="--connection" shortcut="" pattern="equals">
        <help><![CDATA[The connection to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:schema:create</name>
    <help><![CDATA[The <b>doctrine:schema:create</b> command executes the SQL needed to<br> generate the database schema for the default entity manager:<br> <br> <b>php app/console doctrine:schema:create</b><br> <br> You can also generate the database schema for a specific entity manager:<br> <br> <b>php app/console doctrine:schema:create --em=default</b><br> <br> Finally, instead of executing the SQL, you can output the SQL:<br> <br> <b>php app/console doctrine:schema:create --dump-sql</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--dump-sql</td><td></td><td>Instead of try to apply generated SQLs into EntityManager Storage Connection, output them.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--dump-sql" shortcut="">
        <help><![CDATA[Instead of try to apply generated SQLs into EntityManager Storage Connection, output them.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:schema:drop</name>
    <help><![CDATA[The <b>doctrine:schema:drop</b> command generates the SQL needed to<br> drop the database schema of the default entity manager:<br> <br> <b>php app/console doctrine:schema:drop --dump-sql</b><br> <br> Alternatively, you can execute the generated queries:<br> <br> <b>php app/console doctrine:schema:drop --force</b><br> <br> You can also optionally specify the name of a entity manager to drop the<br> schema for:<br> <br> <b>php app/console doctrine:schema:drop --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--dump-sql</td><td></td><td>Instead of try to apply generated SQLs into EntityManager Storage Connection, output them.</td></tr> <tr><td>--force</td><td></td><td>Don't ask for the deletion of the database, but force the operation to run.</td></tr> <tr><td>--full-database</td><td></td><td>Instead of using the Class Metadata to detect the database table schema, drop ALL assets that the database contains.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--dump-sql" shortcut="">
        <help><![CDATA[Instead of try to apply generated SQLs into EntityManager Storage Connection, output them.]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Don't ask for the deletion of the database, but force the operation to run.]]></help>
      </option>
      <option name="--full-database" shortcut="">
        <help><![CDATA[Instead of using the Class Metadata to detect the database table schema, drop ALL assets that the database contains.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:schema:update</name>
    <help><![CDATA[The <b>doctrine:schema:update</b> command generates the SQL needed to<br> synchronize the database schema with the current mapping metadata of the<br> default entity manager.<br> <br> For example, if you add metadata for a new column to an entity, this command<br> would generate and output the SQL needed to add the new column to the database:<br> <br> <b>php app/console doctrine:schema:update --dump-sql</b><br> <br> Alternatively, you can execute the generated queries:<br> <br> <b>php app/console doctrine:schema:update --force</b><br> <br> You can also update the database schema for a specific entity manager:<br> <br> <b>php app/console doctrine:schema:update --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--complete</td><td></td><td>If defined, all assets of the database which are not relevant to the current metadata will be dropped.</td></tr> <tr><td>--dump-sql</td><td></td><td>Dumps the generated SQL statements to the screen (does not execute them).</td></tr> <tr><td>--force</td><td></td><td>Causes the generated SQL statements to be physically executed against your database.</td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--complete" shortcut="">
        <help><![CDATA[If defined, all assets of the database which are not relevant to the current metadata will be dropped.]]></help>
      </option>
      <option name="--dump-sql" shortcut="">
        <help><![CDATA[Dumps the generated SQL statements to the screen (does not execute them).]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Causes the generated SQL statements to be physically executed against your database.]]></help>
      </option>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>doctrine:schema:validate</name>
    <help><![CDATA[The <b>doctrine:schema:validate</b> checks the current mappings<br> for valid forward and reverse mappings.<br> <br> <b>php app/console doctrine:schema:validate</b><br> <br> You can also optionally specify the <comment>--em</comment> option to specify<br> which entity manager use for the validation.<br> <br> <b>php app/console doctrine:schema:validate --em=default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--em</td><td></td><td>The entity manager to use for this command</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--em" shortcut="" pattern="equals">
        <help><![CDATA[The entity manager to use for this command]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>generate:bundle</name>
    <help><![CDATA[The <b>generate:bundle</b> command helps you generates new bundles.<br> <br> By default, the command interacts with the developer to tweak the generation.<br> Any passed option will be used as a default value for the interaction<br> (<comment>--namespace</comment> is the only one needed if you follow the<br> conventions):<br> <br> <b>php app/console generate:bundle --namespace=Acme/BlogBundle</b><br> <br> Note that you can use <comment>/</comment> instead of <comment>\ </comment>for the namespace delimiter to avoid any<br> problem.<br> <br> If you want to disable any user interaction, use <comment>--no-interaction</comment> but don't forget to pass all needed options:<br> <br> <b>php app/console generate:bundle --namespace=Acme/BlogBundle --dir=src [--bundle-name=...] --no-interaction</b><br> <br> Note that the bundle namespace must end with "Bundle".<br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--namespace</td><td></td><td>The namespace of the bundle to create</td></tr> <tr><td>--dir</td><td></td><td>The directory where to create the bundle</td></tr> <tr><td>--bundle-name</td><td></td><td>The optional bundle name</td></tr> <tr><td>--format</td><td></td><td>Use the format for configuration files (php, xml, yml, or annotation)</td></tr> <tr><td>--structure</td><td></td><td>Whether to generate the whole directory structure</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--namespace" shortcut="" pattern="equals">
        <help><![CDATA[The namespace of the bundle to create]]></help>
      </option>
      <option name="--dir" shortcut="" pattern="equals">
        <help><![CDATA[The directory where to create the bundle]]></help>
      </option>
      <option name="--bundle-name" shortcut="" pattern="equals">
        <help><![CDATA[The optional bundle name]]></help>
      </option>
      <option name="--format" shortcut="" pattern="equals">
        <help><![CDATA[Use the format for configuration files (php, xml, yml, or annotation)]]></help>
      </option>
      <option name="--structure" shortcut="">
        <help><![CDATA[Whether to generate the whole directory structure]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>init:acl</name>
    <help><![CDATA[The <b>init:acl</b> command mounts ACL tables in the database.<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console init:acl</b><br> <br> The name of the DBAL connection must be configured in your <b>app/config/security.yml</b> configuration file in the <b>security.acl.connection</b> variable.<br> <br> <b>security:<br> acl:<br> connection: default</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> </table> <br/>]]></help>
  </command>
  <command>
    <name>init:jms-secure-random</name>
    <help><![CDATA[<table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--dump-sql</td><td></td><td>Whether the SQL should be dumped.</td></tr> <tr><td>--force</td><td></td><td>Whether the SQL should be executed.</td></tr> </table> <br/>]]></help>
    <params>phrase</params>
    <optionsBefore>
      <option name="--dump-sql" shortcut="">
        <help><![CDATA[Whether the SQL should be dumped.]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Whether the SQL should be executed.]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>router:debug</name>
    <help><![CDATA[The <b>router:debug</b> displays the configured routes:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console router:debug</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> </table> <br/>]]></help>
    <params>name[=null]</params>
  </command>
  <command>
    <name>router:dump-apache</name>
    <help><![CDATA[The <b>router:dump-apache</b> dumps all routes as Apache rewrite rules.<br> These can then be used with the ApacheUrlMatcher to use Apache for route<br> matching.<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console router:dump-apache</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--base-uri</td><td></td><td>The base URI</td></tr> </table> <br/>]]></help>
    <params>script_name[=null]</params>
    <optionsBefore>
      <option name="--base-uri" shortcut="" pattern="equals">
        <help><![CDATA[The base URI]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>router:match</name>
    <help><![CDATA[The <b>router:match</b> simulates a path info match:<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console router:match /foo</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> </table> <br/>]]></help>
    <params>path_info</params>
  </command>
  <command>
    <name>server:run</name>
    <help><![CDATA[The <b>server:run</b> runs PHP built-in web server:<br> <br> <b>C:\wamp\www\Symfony_Bakalarka\app\console server:run</b><br> <br> To change default bind address and port use the <b>address</b> argument:<br> <br> <b>C:\wamp\www\Symfony_Bakalarka\app\console server:run 127.0.0.1:8080</b><br> <br> To change default docroot directory use the <b>--docroot</b> option:<br> <br> <b>C:\wamp\www\Symfony_Bakalarka\app\console server:run --docroot=htdocs/</b><br> <br> If you have custom docroot directory layout, you can specify your own<br> router script using <b>--router</b> option:<br> <br> <b>C:\wamp\www\Symfony_Bakalarka\app\console server:run --router=app/config/router.php</b><br> <br> See also: http://www.php.net/manual/en/features.commandline.webserver.php<br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--docroot</td><td>(-d)</td><td>Document root</td></tr> <tr><td>--router</td><td>(-r)</td><td>Path to custom router script</td></tr> </table> <br/>]]></help>
    <params>address[=null]</params>
    <optionsBefore>
      <option name="--docroot" shortcut="-d" pattern="equals">
        <help><![CDATA[Document root]]></help>
      </option>
      <option name="--router" shortcut="-r" pattern="equals">
        <help><![CDATA[Path to custom router script]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>swiftmailer:spool:send</name>
    <help><![CDATA[The <b>swiftmailer:spool:send</b> command sends all emails from the spool.<br> <br> <b>php app/console swiftmailer:spool:send --message-limit=10 --time-limit=10 --recover-timeout=900</b><br> <br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--message-limit</td><td></td><td>The maximum number of messages to send.</td></tr> <tr><td>--time-limit</td><td></td><td>The time limit for sending messages (in seconds).</td></tr> <tr><td>--recover-timeout</td><td></td><td>The timeout for recovering messages that have taken too long to send (in seconds).</td></tr> </table> <br/>]]></help>
    <optionsBefore>
      <option name="--message-limit" shortcut="" pattern="equals">
        <help><![CDATA[The maximum number of messages to send.]]></help>
      </option>
      <option name="--time-limit" shortcut="" pattern="equals">
        <help><![CDATA[The time limit for sending messages (in seconds).]]></help>
      </option>
      <option name="--recover-timeout" shortcut="" pattern="equals">
        <help><![CDATA[The timeout for recovering messages that have taken too long to send (in seconds).]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>translation:update</name>
    <help><![CDATA[The <b>translation:update</b> command extract translation strings from templates<br> of a given bundle. It can display them or merge the new ones into the translation files.<br> When new translation strings are found it can automatically add a prefix to the translation<br> message.<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console translation:update --dump-messages en AcmeBundle</b><br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console translation:update --force --prefix="new_" fr AcmeBundle</b><br/><br/><table> <tr><td><strong>Options:</strong></td></tr> <tr><td>--prefix</td><td></td><td>Override the default prefix</td></tr> <tr><td>--output-format</td><td></td><td>Override the default output format</td></tr> <tr><td>--dump-messages</td><td></td><td>Should the messages be dumped in the console</td></tr> <tr><td>--force</td><td></td><td>Should the update be done</td></tr> </table> <br/>]]></help>
    <params>locale bundle</params>
    <optionsBefore>
      <option name="--prefix" shortcut="" pattern="equals">
        <help><![CDATA[Override the default prefix]]></help>
      </option>
      <option name="--output-format" shortcut="" pattern="equals">
        <help><![CDATA[Override the default output format]]></help>
      </option>
      <option name="--dump-messages" shortcut="">
        <help><![CDATA[Should the messages be dumped in the console]]></help>
      </option>
      <option name="--force" shortcut="">
        <help><![CDATA[Should the update be done]]></help>
      </option>
    </optionsBefore>
  </command>
  <command>
    <name>twig:lint</name>
    <help><![CDATA[The <b>twig:lint</b> command lints a template and outputs to stdout<br> the first encountered syntax error.<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console twig:lint filename</b><br> <br> The command gets the contents of <comment>filename</comment> and validates its syntax.<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console twig:lint dirname</b><br> <br> The command finds all twig templates in <comment>dirname</comment> and validates the syntax<br> of each Twig template.<br> <br> <b>php C:\wamp\www\Symfony_Bakalarka\app\console twig:lint @AcmeMyBundle</b><br> <br> The command finds all twig templates in the <comment>AcmeMyBundle</comment> bundle and validates<br> the syntax of each Twig template.<br> <br> <b>cat filename | php C:\wamp\www\Symfony_Bakalarka\app\console twig:lint</b><br> <br> The command gets the template contents from stdin and validates its syntax.<br/><br/><table> <tr><td><strong>Options:</strong></td></tr> </table> <br/>]]></help>
    <params>filename[=null]</params>
  </command>
  <help><![CDATA[<p>Usage:<br> [options] command [arguments] </p><br> <table> <tr><td><strong>Available commands:</strong></td></tr> <tr><td>help</td><td>Displays help for a command</td></tr> <tr><td>list</td><td>Lists commands</td></tr> <tr><td>assetic:dump</td><td>Dumps all assets to the filesystem</td></tr> <tr><td>assets:install</td><td>Installs bundles web assets under a public web directory</td></tr> <tr><td>cache:clear</td><td>Clears the cache</td></tr> <tr><td>cache:warmup</td><td>Warms up an empty cache</td></tr> <tr><td>config:dump-reference</td><td>Dumps default configuration for an extension</td></tr> <tr><td>container:debug</td><td>Displays current services for an application</td></tr> <tr><td>doctrine:cache:clear-metadata</td><td>Clears all metadata cache for a entity manager</td></tr> <tr><td>doctrine:cache:clear-query</td><td>Clears all query cache for a entity manager</td></tr> <tr><td>doctrine:cache:clear-result</td><td>Clears result cache for a entity manager</td></tr> <tr><td>doctrine:database:create</td><td>Creates the configured databases</td></tr> <tr><td>doctrine:database:drop</td><td>Drops the configured databases</td></tr> <tr><td>doctrine:ensure-production-settings</td><td>Verify that Doctrine is properly configured for a production environment.</td></tr> <tr><td>doctrine:generate:crud</td><td>Generates a CRUD based on a Doctrine entity</td></tr> <tr><td>generate:doctrine:crud</td><td>Generates a CRUD based on a Doctrine entity</td></tr> <tr><td>doctrine:generate:entities</td><td>Generates entity classes and method stubs from your mapping information</td></tr> <tr><td>generate:doctrine:entities</td><td>Generates entity classes and method stubs from your mapping information</td></tr> <tr><td>doctrine:generate:entity</td><td>Generates a new Doctrine entity inside a bundle</td></tr> <tr><td>generate:doctrine:entity</td><td>Generates a new Doctrine entity inside a bundle</td></tr> <tr><td>doctrine:generate:form</td><td>Generates a form type class based on a Doctrine entity</td></tr> <tr><td>generate:doctrine:form</td><td>Generates a form type class based on a Doctrine entity</td></tr> <tr><td>doctrine:mapping:convert</td><td>Convert mapping information between supported formats.</td></tr> <tr><td>doctrine:mapping:import</td><td>Imports mapping information from an existing database</td></tr> <tr><td>doctrine:mapping:info</td><td>Shows basic information about all mapped entities</td></tr> <tr><td>doctrine:query:dql</td><td>Executes arbitrary DQL directly from the command line.</td></tr> <tr><td>doctrine:query:sql</td><td>Executes arbitrary SQL directly from the command line.</td></tr> <tr><td>doctrine:schema:create</td><td>Executes (or dumps) the SQL needed to generate the database schema</td></tr> <tr><td>doctrine:schema:drop</td><td>Executes (or dumps) the SQL needed to drop the current database schema</td></tr> <tr><td>doctrine:schema:update</td><td>Executes (or dumps) the SQL needed to update the database schema to match the current mapping metadata</td></tr> <tr><td>doctrine:schema:validate</td><td>Validates the doctrine mapping files</td></tr> <tr><td>generate:bundle</td><td>Generates a bundle</td></tr> <tr><td>init:acl</td><td>Mounts ACL tables in the database</td></tr> <tr><td>init:jms-secure-random</td><td></td></tr> <tr><td>router:debug</td><td>Displays current routes for an application</td></tr> <tr><td>router:dump-apache</td><td>Dumps all routes as Apache rewrite rules</td></tr> <tr><td>router:match</td><td>Helps debug routes by simulating a path info match</td></tr> <tr><td>server:run</td><td>Runs PHP built-in web server</td></tr> <tr><td>swiftmailer:spool:send</td><td>Sends emails from the spool</td></tr> <tr><td>translation:update</td><td>Updates the translation file</td></tr> <tr><td>twig:lint</td><td>Lints a template and outputs encountered errors</td></tr> </table> <br/>]]></help>
</framework>

